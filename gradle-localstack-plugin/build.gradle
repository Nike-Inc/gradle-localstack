plugins {
    id "idea"
    id "groovy"
    id "java-gradle-plugin"
    id "maven-publish"
    id "org.asciidoctor.jvm.convert"    version "3.1.0"
    id "com.github.hierynomus.license"  version "0.15.0"
    id "org.unbroken-dome.test-sets"    version "3.0.1"
}

// Project Configuration
project.group           = "com.nike.pdm.localstack"
project.version         = "0.1.0" + String.format(".%s", System.getenv("BUILD_NUMBER") ?: 0)
project.description     = "Gradle plugin for interacting with mock AWS endpoints using LocalStack"

project.ext.name        = "gradle-localstack-plugin"
project.ext.pluginId    = "com.nike.pdm.localstack"
project.ext.scm         = "scm:git@github.com/Nike-Inc/gradle-localstack.git"
project.ext.url         = "https://github.com/Nike-Inc/gradle-localstack.git"

// Dependency Configuration
project.ext.awsVersion  = "1.11.447"
project.ext.composePluginVersion = "0.12.1"
project.ext.springbootPluginVersion = "2.2.4.RELEASE"

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    gradleApi()

    implementation "com.avast.gradle:gradle-docker-compose-plugin:${composePluginVersion}"
    implementation "org.springframework.boot:spring-boot-gradle-plugin:${springbootPluginVersion}";

    implementation "com.amazonaws:aws-java-sdk-cloudformation:${awsVersion}"
    implementation "com.amazonaws:aws-java-sdk-dynamodb:${awsVersion}"
    implementation "com.amazonaws:aws-java-sdk-sqs:${awsVersion}"
    implementation "com.amazonaws:aws-java-sdk-sns:${awsVersion}"
    implementation "com.amazonaws:aws-java-sdk-s3:${awsVersion}"
    implementation "commons-io:commons-io:2.7"
    implementation "de.vandermeer:asciitable:0.3.2"

    testImplementation gradleTestKit()
    testImplementation("org.spockframework:spock-core:1.1-groovy-2.4") {
        exclude module: "groovy-all"
    }
    testImplementation "com.github.docker-java:docker-java:3.2.5"
    testImplementation "com.github.docker-java:docker-java-transport-httpclient5:3.2.5"
    testImplementation "com.github.stefanbirkner:system-rules:1.19.0"
    testImplementation "com.sun.istack:istack-commons-runtime:3.0.11"
}

// Test Configuration
testSets {
    funcTest
}

// Publishing Configuration
gradlePlugin {
    testSourceSets sourceSets.funcTest

    plugins {
        localstackPlugin {
            id = pluginId
            implementationClass = "com.nike.pdm.localstack.LocalStackPlugin"
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

// Documentation Configuration
asciidoctor {
    baseDirFollowsSourceDir()
    version = project.version
    sourceDir = file("src/docs/asciidoc")
    attributes = [
            "toc": "left",
            "source-highlighter": "prettify",
            "icons": "font",
            "numbered": "",
            "idprefix": "",
            "docinfo1": "true",
            "sectanchors": "true",
            "samplesCodeDir": file("src/docs/samples")
    ]
}

task buildDocSite(type: Copy) {
    group('Documentation')
    description('Builds the documentation website for the plugin.')
    dependsOn('build', 'cleanDocSite', 'asciidoctor')
    destinationDir = file("docsite")

    from ("${buildDir}/docs/asciidoc") {
        include "index.html"
    }

    from ("${buildDir}/docs/javadoc") {
        into "javadoc"
    }
}

task cleanDocSite(type: Delete) {
    group('Documentation')
    description('Deletes the documentation website for the plugin.')
    delete "docsite"
}

// Licensing Configuration
license {
    header rootProject.file('codequality/LICENSE_HEADER')
    strictCheck true
    excludes([ "**/*.json", "**/*.yml", "**/*.yaml", "**/*.properties", "**/*.html", "**/*.js", "**/*.css",  "**/*.map"])
}
